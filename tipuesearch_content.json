{"pages":[{"title":"DNS相关知识总结","text":"DNS相关知识总结 名词解释 Domain Name System 一个由 分层 的域名服务器实现的分布式数据库体系，由以下类型的服务器组成 根域名服务器 顶级域名服务器（Top Level Domain） 权威域名服务器 DNS协议是应用层协议，一般基于UDP ，端口号默认为53 顶级域名 域名的最后一个部分，即是域名最后一点之后的字母，例如在 example.com 这个域名中，顶级域是 .com （或 .COM ），大小写视为相同。 本地dns服务器 作为代理把dns请求转发到dns服务器层次结构中，与根域名服务器的交互过程是递归的，即通过向自身上层的dns代理发送情况直到到达根域名服务器 域名解析流程 DNS 查询有两种方式： 递归 和 迭代 。DNS 客户端设置使用的 DNS 服务器（即本地DNS服务器）一般都是递归服务器，它负责全权处理客户端的 DNS 查询请求，直到返回最终结果。而 DNS 服务器之间一般采用迭代查询方式。 以查询 zh.wikipedia.org 为例： 客户端发送查询报文 \"query zh.wikipedia.org\" 至 DNS 服务器，DNS 服务器首先检查自身缓存，如果存在记录则直接返回结果。 如果记录老化或不存在，则 DNS 服务器向 根域名服务器 发送查询报文 \"query zh.wikipedia.org\"，根域名服务器返回. org 域的权威域名服务器地址，这一级首先会返回的是 顶级域名 的权威域名服务器。 DNS 服务器向. org 域的权威域名服务器发送查询报文 \"query zh.wikipedia.org\"，得到. wikipedia.org 域的权威域名服务器地址。 DNS 服务器向. wikipedia.org 域的权威域名服务器发送查询报文 \"query zh.wikipedia.org\"，得到主机 zh 的 A 记录，存入自身缓存并返回给客户端。 常见记录类型 主机记录（A 记录）：RFC 1035 定义，A 记录是用于名称解析的重要记录，它将特定的主机名映射到对应主机的 IP 地址上。 别名记录（CNAME 记录）: RFC 1035 定义，CNAME 记录用于将某个别名指向到某个 A 记录上，这样就不需要再为某个新名字另外创建一条新的 A 记录。 IPv6 主机记录（AAAA 记录）: RFC 3596 定义，与 A 记录对应，用于将特定的主机名映射到一个主机的 IPv6 地址。 服务位置记录（SRV 记录）: RFC 2782 定义，用于定义提供特定服务的服务器的位置，如主机（hostname），端口（port number）等。 负载均衡 给一个域名提供多条A记录，DNS服务器根据用户需求在解析时进行负载均衡 CDN的实现 原理 DNS请求会分配到不同的节点上，避免因单点故障造成域名解析瘫痪，同时DNS服务器会把域名解析到距离客户地理位置最近的服务器地址或负载相对较小的地址，以加速访问 具体解析过程 在迭代查询过程中进行智能DNS解析 将不同区域的 IP 地址存储在一张 IP 地址及其地理信息的映射表中，当有用户请求时，将其解析到最近的线路中。 根据繁忙程度解析到空闲的线路中 参考 域名","tags":"network","url":"https://niyoh120.github.io/dnsxiang-guan-zhi-shi-zong-jie.html"},{"title":"理解Python的装饰器","text":"理解Python的装饰器 @decorator def foo (): pass 实际上等于 foo=decorator(foo) 装饰器的返回值应该是一个 callable ，这样 foo 才能被调用 In [ 11 ]: def decorator ( func ): ... : def wrap ( * args , ** kw ): ... : print ( 'in decorator' ) ... : return func ( * args , ** kw ) ... : return wrap ... : In [ 12 ]: @decorator ... : def foo (): ... : print ( 'in foo' ) ... : In [ 13 ]: foo () in decorator in foo foo=decorator(foo) 执行于 foo 的定义完成时（python中函数定义也是一种语句） 利用装饰器可以很方便的实现闭包，闭包可以理解为具有上下文的函数 def print_message ( msg ): def closeure ( func ): def wrap ( * args , ** kw ): print ( msg ) return func ( * args , ** kw ) return wrap return closeure @print_message ( 'msg1' ) def foo1 (): pass @print_message ( 'msg2' ) def foo2 (): pass foo1 () foo2 () >> msg1 >> msg2 装饰器可以嵌套，注意执行顺序是装饰器的使用顺序 def print_message ( msg ): def closeure ( func ): def wrap ( * args , ** kw ): print ( msg ) return func ( * args , ** kw ) return wrap return closeure @print_message ( 'msg1' ) @print_message ( 'msg2' ) def foo1 (): pass @print_message ( 'msg2' ) @print_message ( 'msg1' ) def foo2 (): pass foo1 () foo2 () >> msg1 >> msg2 >> msg2 >> msg1 因为装饰器实际上是语法糖，所以有一个问题，装饰器返回的函数并不是原本的函数，原本的函数的一些属性（如文档字符串）可能会丢失。 解决方法是使用 functools.wraps ，它会将原来函数的属性复制到装饰器返回的函数中。 >>> from functools import wraps >>> def my_decorator ( f ): ... @wraps ( f ) ... def wrapper ( * args , ** kwds ): ... print ( 'Calling decorated function' ) ... return f ( * args , ** kwds ) ... return wrapper ... >>> @my_decorator ... def example (): ... \"\"\"Docstring\"\"\" ... print ( 'Called example function' ) ... >>> example () Calling decorated function Called example function >>> example . __name__ 'example' >>> example . __doc__ 'Docstring'","tags":"python","url":"https://niyoh120.github.io/li-jie-pythonde-zhuang-shi-qi.html"},{"title":"理解Python的生成器","text":"理解Python的生成器 定义一个生成器的方法 定义一个含有 yield 语句的函数 定义一个实现了 __iter___ 方法（迭代器协议），方法中含有yield语句的类 通过内置的 next 函数和生成器的 send 方法，可以实现调用者与生成器之间的通信和控制流转移 In [ 1 ]: def gen (): ... : print ( 'in gen' ) ... : n = 0 ... : yield ... : while True : ... : print ( 'yield {}' . format ( n )) ... : n = yield n ... : print ( 'recv {}' . format ( n )) ... : return ... : In [ 2 ]: g = gen () In [ 3 ]: next ( g ) # 等于调用gen.send(None) in gen In [ 4 ]: g . send ( 1 ) yield 0 Out [ 5 ]: 0 In [ 6 ]: g . send ( 1 ) recv 1 yield 1 Out [ 7 ]: 1 首次调用 next 函数或生成器的 send 方法时，生成器会执行到第一个 yield 语句处然后返回，返回值为 yield 后跟的表达式的值，注意首次若是调用send方法，则传入的参数必须是 None ，否则会抛出异常 TypeError: can't send non-None value to a just-started generator 。 之后调用 send 方法时，其参数会作为生成器中 yield 语句的值传入，生成器会执行到下一个 yield 表达式处后再次返回。 生成器执行到 return 语句后会抛出 StopIteration 异常，返回值会赋值给异常的 value 属性。 内置的 for 语句和一些标准库设施在迭代生成器时会自动处理该异常，这会导致一些不易察觉的bug In [ 1 ]: def gen (): ... : for i in range ( 10 ): ... : yield i ... : return ... : In [ 2 ]: g = gen () In [ 3 ]: for i in g : ... : print ( i ) ... : 0 1 2 3 4 5 6 7 8 9 In [ 4 ]: for i in g : ... : print ( i ) ... : 第二次迭代不会有任何输出，因为生成器已经执行到了 return 语句，换句话说，生成器只能迭代一次。若需要多次迭代同一个生成器，应先将它转换成一个迭代器（最常见的方法是用 list 转换成一个列表然后迭代）","tags":"python","url":"https://niyoh120.github.io/li-jie-pythonde-sheng-cheng-qi.html"}]}